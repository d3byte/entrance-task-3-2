!function(e){var r={};function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,r,t){o.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,r){if(1&r&&(e=o(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)o.d(t,n,function(r){return e[r]}.bind(null,n));return t},o.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(r,"a",r),r},o.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},o.p="",o(o.s=0)}([function(e,r,o){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=o(1),n=function(e){var r=[];e.map(function(e){if(r.includes(e.id))throw new Error("ID приборов должны быть уникальны");r.push(e.id)})};function i(e){if(!e.devices||!e.rates||!e.maxPower)throw new Error("Входные данные не соответствуют необходимой структуре");n(e.devices);var r={0:[],1:[],2:[],3:[],4:[],5:[],6:[],7:[],8:[],9:[],10:[],11:[],12:[],13:[],14:[],15:[],16:[],17:[],18:[],19:[],20:[],21:[],22:[],23:[]},o=new Array(24).fill(0),t={value:0,devices:{}},i=function(e,r){return e.sort(function(e,o){return e[r]>o[r]?-1:e[r]===o[r]?0:1})},u=function(e,r){void 0===r&&(r=4);var o=e.toFixed(r).toString();return"0"===o[o.length-1]?u(e,r-1):parseFloat(o)},a=i(e.devices,"duration"),d={night:[],day:[]};return e.rates.map(function(e){(e.from>=21||e.from<=7)&&(e.to>=21||e.to<=7)?d.night.push(e):d.day.push(e)}),d.night=i(d.night,"value").reverse(),d.day=i(d.day,"value").reverse(),a.map(function(n){var a=0;return t.devices[n.id]=0,"night"===n.mode?d.night.map(function(i){var u=i.from;if(i.to<i.from&&a<n.duration)for(;a<n.duration&&!(a>=n.duration);){24===u&&(u=0),o[u]+n.power<=e.maxPower&&(u>=i.to||u<i.to)&&!r[u].includes(n.id)&&(a++,o[u]+=n.power,r[u].push(n.id),t.value+=i.value*(n.power/1e3),t.devices[n.id]+=i.value*(n.power/1e3)),u++}else if(i.to>i.from&&a<n.duration)for(;a<n.duration&&!(a>=n.duration);){o[u]+n.power<=e.maxPower&&u>=i.from&&u<i.to&&!r[u].includes(n.id)&&(a++,o[u]+=n.power,r[u].push(n.id),t.value+=i.value*(n.power/1e3),t.devices[n.id]+=i.value*(n.power/1e3)),u++}}):"day"===n.mode?d.day.map(function(i){for(var u=i.from;u<i.to&&!(a>=n.duration);u++){o[u]+n.power<=e.maxPower&&u>=i.from&&u<i.to&&!r[u].includes(n.id)&&(a++,o[u]+=n.power,r[u].push(n.id),t.value+=i.value*(n.power/1e3),t.devices[n.id]+=i.value*(n.power/1e3))}}):n.mode||i(e.rates,"value").reverse().map(function(i){var u=i.from;if(i.to<i.from&&a<n.duration)for(;a<n.duration&&!(a>=n.duration);){if(24===u&&(u=0),!(o[u]+n.power<=e.maxPower)||!(u>=i.from||u<i.to)||r[u].includes(n.id))break;a++,o[u]+=n.power,r[u].push(n.id),t.value+=i.value*(n.power/1e3),t.devices[n.id]+=i.value*(n.power/1e3),u++}else if(i.to>i.from&&a<n.duration)for(;a<n.duration&&!(a>=n.duration);){if(!(o[u]+n.power<=e.maxPower&&u>=i.from&&u<i.to)||r[u].includes(n.id))break;a++,o[u]+=n.power,r[u].push(n.id),t.value+=i.value*(n.power/1e3),t.devices[n.id]+=i.value*(n.power/1e3),u++}}),t.devices[n.id]=u(t.devices[n.id]),n}),t.value=u(t.value),{schedule:r,consumedEnergy:t}}r.default=i;var u=i(t.default);console.log(u)},function(e,r,o){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default={devices:[{id:"F972B82BA56A70CC579945773B6866FB",name:"Посудомоечная машина",power:950,duration:3,mode:"night"},{id:"C515D887EDBBE669B2FDAC62F571E9E9",name:"Духовка",power:2e3,duration:2,mode:"day"},{id:"02DDD23A85DADDD71198305330CC386D",name:"Холодильник",power:50,duration:24},{id:"1E6276CC231716FE8EE8BC908486D41E",name:"Термостат",power:50,duration:24},{id:"7D9DC84AD110500D284B33C82FE6E85E",name:"Кондиционер",power:850,duration:1}],rates:[{from:7,to:10,value:6.46},{from:10,to:17,value:5.38},{from:17,to:21,value:6.46},{from:21,to:23,value:5.38},{from:23,to:7,value:1.79}],maxPower:2100}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,